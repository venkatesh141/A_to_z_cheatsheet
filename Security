@Configuration
public class CorsConfig {


👉 @Configuration tells Spring Boot: This class contains bean definitions (like settings/configurations) that Spring should manage.
Here, we’re making a configuration for CORS (Cross-Origin Resource Sharing).

@Bean
public CorsFilter corsFilter() {


👉 @Bean tells Spring: This method will create an object (bean) that should be used inside the application.
We are creating a CorsFilter bean here.
CorsFilter is a Spring filter that controls which domains can call your API.

CorsConfiguration config = new CorsConfiguration();


👉 This makes a new CORS configuration object where we will set rules (who is allowed, what methods are allowed, etc.).

config.setAllowedOrigins(Arrays.asList( "https://opticwave.in/", "https://www.opticwave.in/" ));


👉 This sets which websites are allowed to call your backend.
Here, only https://opticwave.in and https://www.opticwave.in are allowed.
⚠️ Note: You should not put a trailing / (like https://opticwave.in/) — keep it as https://opticwave.in.

config.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"));


👉 This tells: These HTTP methods are allowed from those websites.
Example: GET for reading, POST for creating, PUT for updating, DELETE for deleting, etc.

config.setAllowedHeaders(Arrays.asList("*"));


👉 This means: Allow all headers (like Authorization, Content-Type, etc.).
If you didn’t allow them, the browser might block some requests.

config.setAllowCredentials(true);


👉 This means: Allow credentials like cookies, tokens, or authorization headers.
If this is false, the frontend won’t be able to send cookies or Authorization headers.

UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();


👉 This creates a CORS source object that maps URL paths (like /api/**) to the CORS configuration.

source.registerCorsConfiguration("/**", config);


👉 This means: Apply the above CORS rules to all API paths (/** means everything).
So, no matter which endpoint is called, these CORS rules apply.

return new CorsFilter(source);


👉 Finally, return a new CorsFilter with our rules.
Spring Boot will use this filter to check every request and block/allow based on the rules.

✅ In short:
This config says:

Only https://opticwave.in and https://www.opticwave.in can call your API.

They can use methods: GET, POST, PUT, DELETE, OPTIONS, PATCH.

They can send any headers.

They can send credentials (like cookies/auth).

This rule applies to all your APIs.
---------------------------------------------------------------------------------------------

@Component
public class DataInitializer implements CommandLineRunner {
👉 @Component tells Spring: This class should be automatically discovered and used by Spring.
👉 implements CommandLineRunner means: Run this class’s run() method automatically when the application starts.

java
Copy code
@Autowired
private UserRepository userRepository;
👉 This injects (@Autowired) the UserRepository so you can save and find users in the database.

java
Copy code
private BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder(12);
👉 Creates a password encoder with strength 12.
This means when you save passwords, they’ll be encrypted (hashed) securely.
(You never save raw passwords in the database).

java
Copy code
@Override
public void run(String... args) throws Exception {
👉 This method runs automatically after Spring Boot starts.
Here you write code that should run at application startup (like inserting a default admin).

java
Copy code
String adminEmail = "admin@opticwave.com";
👉 Sets the email ID of the default super admin user.

java
Copy code
if (userRepository.findByEmail(adminEmail).isEmpty()) {
👉 Checks in the database: Is there already a user with this email?

If no such user → create one.

If user exists → don’t create again.

java
Copy code
User superAdmin = new User();
👉 Creates a new User object (super admin user).

java
Copy code
superAdmin.setUsername("superadmin");
superAdmin.setEmail(adminEmail);
superAdmin.setRole(UserRole.ROLE_ADMIN);
👉 Sets the user’s:

Username = superadmin

Email = admin@opticwave.com

Role = ROLE_ADMIN (so he has admin powers).

java
Copy code
superAdmin.setPassword(passwordEncoder.encode("Opticwave@superAdmin@May@2025"));
👉 Sets the password for this user, but not in plain text!
It encrypts it using BCryptPasswordEncoder before saving.
(Default password → should be changed in production).

java
Copy code
userRepository.save(superAdmin);
👉 Saves the new admin user into the database.

java
Copy code
System.out.println("✅ Super Admin initialized with email: " + adminEmail);
👉 Prints a message in the console saying a new super admin is created.

java
Copy code
} else {
    System.out.println("ℹ️ Super Admin already exists.");
}
👉 If an admin already exists, just print a message instead of creating a new one.

✅ In short:
This code runs when the app starts and ensures there’s always one super admin in the database. If it’s missing, it creates one with default credentials.

----------------------------------------------------------------------














