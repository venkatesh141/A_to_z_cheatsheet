
abstract class Animal {
    
    abstract void makeSound();

    
    void sleep() {
        System.out.println("This animal is sleeping.");
    }
}


class Dog extends Animal {
    // The body of makeSound() is provided here
    @Override
    void makeSound() {
        System.out.println("Woof Woof");
    }
}


class Cat extends Animal {
    // The body of makeSound() is provided here
    @Override
    void makeSound() {
        System.out.println("Meow Meow");
    }
}


public class AbstractionExample {
    public static void main(String[] args) {
        // Create objects of Dog and Cat
        Animal myDog = new Dog();
        Animal myCat = new Cat();
        
        // Call the makeSound() method on both objects
        myDog.makeSound(); // Outputs: Woof Woof
        myCat.makeSound(); // Outputs: Meow Meow
        
        // Call the sleep() method on both objects
        myDog.sleep(); // Outputs: This animal is sleeping.
        myCat.sleep(); // Outputs: This animal is sleeping.
    }
}
-----------trust the process you will win .
Interface

  package railway;

public interface Vehicle {

	void speedInfo();
	void vehicleInfo();
}

package railway;

public class Car implements Vehicle {

	@Override
	public void speedInfo() {
		// TODO Auto-generated method stub
		System.out.println("500 km");
		
	}

	@Override
	public void vehicleInfo() {
		// TODO Auto-generated method stub
		System.out.println("it is car");
	}

}
package railway;

public class Bike implements Vehicle {

	@Override
	public void speedInfo() {
		// TODO Auto-generated method stub
		System.out.println("180 km ");		
	}

	@Override
	public void vehicleInfo() {
		// TODO Auto-generated method stub
		System.out.println("it is bike");
	}

}
package railway;

public class Main {

	public static void main(String[] args)
	{
		Vehicle car = new Car();
		Vehicle bike = new Bike();
		
		car.vehicleInfo();
		car.speedInfo();
		bike.vehicleInfo();
		bike.speedInfo();
	}
}
-----------trust the process you will win .
Thread 
Two methods to implement thread
one is using thread
public class Main extends Thread {
  public static void main(String[] args) {
    Main thread = new Main();
    thread.start();
    System.out.println("This code is outside of the thread");
  }
  public void run() {
    System.out.println("This code is running in a thread");
  }
}

another way is using Runnable
public class Main implements Runnable {
  public static void main(String[] args) {
    Main obj = new Main();
    Thread thread = new Thread(obj);
    thread.start();
    System.out.println("This code is outside of the thread");
  }
  public void run() {
    System.out.println("This code is running in a thread");
  }
}
