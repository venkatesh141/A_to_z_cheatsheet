Cn Spring boot notes part 2


Persistence Explained in Simple Terms
Persistence means storing data permanently so that it remains available even after the application or system stops running. In programming,
it ensures that data created or modified by an application is saved in a persistent storage medium like a database, file system, or disk.
-----------------------------------------------------------------
In Spring Boot, derived queries refer to methods in Spring Data JPA repositories that automatically generate SQL queries based on the method name. 
This feature is a part of the Spring Data JPA framework, which allows developers to write database query methods without explicitly writing SQL code.

Derived queries are named methods in repository interfaces that follow a specific naming convention. Spring Data JPA interprets these method names and generates the required query dynamically.

Key Features of Derived Queries:
Method Naming Convention: The method name defines the query operation (e.g., findBy, readBy, countBy, etc.) and the fields used in the query.
No Need for Manual SQL: You don't have to write the actual SQL or JPQL query; Spring automatically generates it based on the method name.
Easy to Use: It simplifies the process of writing basic CRUD and simple conditional queries.
-----------------------------------------------------------------
Spring Data JPA is a part of the Spring Data project that simplifies the implementation of JPA (Java Persistence API)-based repositories. 
It provides a consistent way to interact with databases and helps developers focus on business logic 
by eliminating much of the boilerplate code associated with data access layers.
--------------------------------------------------------------------------
	public interface ToDoRepository: This declares an interface named ToDoRepository. It's a way to define how your application will interact with the database to manage Todo objects.

extends CrudRepository<Todo, Long>: This means that ToDoRepository is using the CrudRepository interface provided by Spring Data.

Todo: This is the type of object the repository will manage. It's usually a class representing a table in your database.
Long: This is the type of the ID field in the Todo class (the primary key).
Purpose:
By extending CrudRepository, your ToDoRepository automatically gets basic methods like:

save(Todo entity): Save a Todo object to the database.
findById(Long id): Find a Todo by its ID.
findAll(): Get all Todo objects.
deleteById(Long id): Delete a Todo by its ID.
In simple terms:
This code is saying:
"I want to create a way to easily save, update, retrieve, and delete Todo items from the database,
 and I don't need to write the code for these operations manually because Spring will handle it for me."
-------------------------------------------------------------------------------------------------------------
1. What is JpaRepository?

    JpaRepository is an interface provided by Spring Data JPA that helps you interact with the database without writing SQL queries.
    It provides built-in methods like s

    ave(), findById(), findAll(), delete(), etc., to perform basic CRUD operations (Create, Read, Update, Delete).
    It works with JPA (Java Persistence API), which is a standard for managing database tables as Java objects (called entities).

When you extend JpaRepository, you automatically get all these database-related methods for free.
2. What does this line mean?

public interface ItemDetailsRepository extends JpaRepository<ItemDetails, Integer>

    ItemDetailsRepository: This is your custom repository interface.
    extends JpaRepository<ItemDetails, Integer>:
        ItemDetails: This is the entity class that represents a table in your database.
        Integer: This is the data type of the primary key in your ItemDetails table (e.g., ID column is of type Integer).

So, this repository interface is linked to your ItemDetails table, and it will let you perform all database operations on this table.
3. What is a derived query?

Derived queries are methods in Spring Data JPA where you don’t write SQL. Instead, you create a method name that follows certain rules, and Spring automatically generates the query for you.
Example:

List<ItemDetails> findByPriceGreaterThan(double price);

    Method Name: findByPriceGreaterThan
        findBy: Means you want to retrieve data.
        Price: Refers to the column name in your ItemDetails table.
        GreaterThan: Means you want to find rows where the price is greater than the provided value.

What does it do?

This method will:

    Find all rows in the ItemDetails table where the value of the price column is greater than the value you pass as a parameter.
    It will return a list of ItemDetails objects.
------------------------------------------------------------------------
Let me explain these three types of queries in a simple way:
1. Derived Query

    Derived queries are built automatically by Spring Data JPA based on the method name.
    You don’t need to write SQL or JPQL; just follow the naming conventions, and Spring will do the rest.
    Example:

    public interface UserRepository extends JpaRepository<User, Long> {
        List<User> findByFirstName(String firstName); // Automatically generates a query like: SELECT * FROM users WHERE first_name = ?
    }

    Key point: No custom query is needed, just method names like findBy, countBy, etc.

2. JPQL (Java Persistence Query Language)

    JPQL is object-oriented. Instead of working with database tables, you write queries using entity names and their fields.
    Example:

    @Query("SELECT u FROM User u WHERE u.firstName = :firstName")
    List<User> findUsersByFirstName(@Param("firstName") String firstName);

        Here, User is the entity class, and firstName is the field in the class.
        JPQL is database-independent, making it portable.

3. Native Query

    Native queries are raw SQL queries written exactly as the database understands them.
    These queries are specific to the database you are using.
    Example:

    @Query(value = "SELECT * FROM users WHERE first_name = :firstName", nativeQuery = true)
    List<User> findUsersByFirstNameNative(@Param("firstName") String firstName);

        You are directly working with table names (users) and column names (first_name).

Key Differences:
Type	What it uses	When to use
Derived Query	Method names	When queries are simple and follow common patterns.
JPQL	Entity and field names	When you want a query that is portable and uses object-oriented concepts.
Native Query	Raw SQL and table/columns	When you need complex queries or database-specific features not supported by JPQL.

Let me know if you'd like to see more examples!

---------------------------------------------------------------------------------


	@Query("SELECT c.name FROM Course c where: student MEMBER OF c.students")
	List<String> getCoursesByStudentId(@Param("student") Student student);


This is a Spring Data JPA query used to retrieve a list of course names for a specific student. Let me explain it step by step:

Purpose:
The query fetches the names of courses that a given student is enrolled in.

Query Explanation:

SELECT c.name FROM Course c:
This selects the name of all courses (Course is the table or entity name).
where :student MEMBER OF c.students:
This checks if the given student (:student) is a member of the students list in a course.
(The c.students represents the list of students enrolled in that course.)
Method Explanation:

@Query(...):
Defines a custom JPQL (Java Persistence Query Language) query.
@Param("student"):
Maps the student parameter in the method to the :student placeholder in the query.
How it works:

You call this method and pass a Student object as input.
It checks which courses the student belongs to and retrieves their names as a list of strings.
Example in Action:
If the database contains:

Course A with students [John, Alice]
Course B with students [Alice]
Course C with students [John]
And you pass a Student object representing "John," the query will return:
["Course A", "Course C"].

Simplified Analogy:
Think of Course as a classroom, and students as the people in it.
This query finds all classrooms where the given student is present and returns their names.

-------------------------------------------------------------------------------------------------


	@Query(value="SELECT * FROM item WHERE description LIKE CONCAT(?1,'%') LIMIT 4",nativeQuery=true)
	List<Item> getItemByDesc(@Param("desc") String desc);

What does this code do?
The @Query annotation is used to define a custom SQL query that retrieves a list of items from a database table named item, 
where the description column starts with a specified value (desc). It limits the result to a maximum of 4 rows.

Breaking it down:
Annotation:

java
Copy
Edit
@Query
This annotation is used to write a custom SQL query in a Spring Data JPA repository.
The nativeQuery=true part means this is a native SQL query (not JPQL).
SQL Query:

sql
Copy
Edit
SELECT * FROM item WHERE description LIKE CONCAT(?1, '%') LIMIT 4
SELECT * FROM item: Retrieves all columns of rows from the item table.
WHERE description LIKE CONCAT(?1, '%'): Filters the rows to include only those where the description starts with the value provided by the first parameter (?1).
?1: Refers to the first method argument (desc).
CONCAT(?1, '%'): Combines the input string with the % wildcard, so it matches any value that starts with desc.
LIMIT 4: Restricts the number of results to a maximum of 4 rows.
Method Signature:

java
Copy
Edit
List<Item> getItemByDesc(@Param("desc") String desc);
List<Item>: The method returns a list of Item objects (mapped to the item table in the database).
@Param("desc"): This binds the method parameter desc to the query's placeholder (?1).


--------------------------------------------------------------------------------------
What is JPA?
JPA (Java Persistence API) is a Java specification that provides a standard way to interact with relational databases in Java applications. It defines a set of rules and interfaces to manage data between Java objects (entities) and a database.

Key Features of JPA:
Object-Relational Mapping (ORM):

JPA maps Java classes (objects) to database tables.
Each Java object corresponds to a row in the table, and the fields in the class map to the columns in the table.
Abstraction:

JPA abstracts away most of the complex SQL operations. Developers can work with objects instead of writing raw SQL for basic CRUD operations.
Annotations for Configuration:

JPA uses annotations like @Entity, @Table, @Id, and @Column to configure mappings between Java objects and database tables.
Querying with JPQL:

JPA provides a query language called JPQL (Java Persistence Query Language), which is similar to SQL but operates on Java objects instead of database tables.
Transaction Management:

JPA integrates with Java's transaction management to handle operations like commit and rollback.

-----------------------------------------------------------------------------------------


Why Use JPA?
Simplified Database Operations: No need to write complex SQL for common tasks.
Portability: JPA works with different databases without requiring major changes in the code.
Productivity: Built-in methods (e.g., findById) and tools reduce boilerplate code.
Integration: JPA integrates seamlessly with Spring Framework, making it a preferred choice for enterprise applications.
---------------------------------------------------------------------------------------------


Let’s simplify this!

In Hibernate, @NamedQuery and @NamedNativeQuery are like predefined queries that you can reuse in your code.

1. @NamedQuery
Think of it as a query written in HQL (Hibernate Query Language), which works with Java objects (entities).
You don’t write SQL here; instead, you refer to the entity and its fields.
Example:
java
Copy
Edit
@NamedQuery(
    name = "findEmployeeByName",
    query = "FROM Employee WHERE name = :name"
)
This says: "Find all employees whose name matches the given value."
How to use it:

java
Copy
Edit
TypedQuery<Employee> query = session.createNamedQuery("findEmployeeByName", Employee.class);
query.setParameter("name", "Venkatesh");
List<Employee> employees = query.getResultList();
2. @NamedNativeQuery
This is for raw SQL queries. You work directly with tables and columns in the database.
Use this when HQL can’t do what you need, or if the database-specific SQL is required.
Example:
java
Copy
Edit
@NamedNativeQuery(
    name = "findEmployeeByDept",
    query = "SELECT * FROM employee WHERE department = :dept",
    resultClass = Employee.class
)
This says: "Find all employees from a specific department (e.g., IT)."
How to use it:

java
Copy
Edit
Query query = session.createNamedQuery("findEmployeeByDept");
query.setParameter("dept", "IT");
List<Employee> employees = query.getResultList();
Difference in Simple Words:
@NamedQuery:

Works with objects (entities).
You use field names from your Java class.
Example: Employee.name
@NamedNativeQuery:

Works with database tables.
You use column names from your database.
Example: employee.name
If you want to search using objects, use @NamedQuery.
If you need to run a pure SQL query, use @NamedNativeQuery.


-----------------------------------------------------------------------------
Spring Security is a framework in Spring that helps secure your application by managing authentication 
(who you are) and authorization (what you're allowed to do). Here’s a simple explanation:

1. What Spring Security Does:
Authentication: Confirms the identity of the user (e.g., username and password check).
Authorization: Decides what actions the authenticated user can perform (e.g., viewing pages or accessing APIs).
Protects your application from common security risks like:
Cross-Site Scripting (XSS)
Cross-Site Request Forgery (CSRF)
Session Hijacking
2. How It Works:
Filters: Spring Security uses a chain of filters to intercept requests. For example:
Checks if the user is logged in.
Confirms if the user has permission to access the resource.
User Details: It verifies user credentials against stored data (e.g., a database).
Roles and Permissions: You can assign roles like ADMIN or USER and allow access based on these roles.
3. Basic Features:
Login and Logout: Adds default login and logout pages.
Password Management: Handles secure storage and validation of passwords.
URL Protection: Allows you to restrict certain URLs (e.g., /admin is only for admins).
Custom Security Rules: Lets you define custom rules like "Users can only access their own data."
4. Simple Example:
Imagine you’re building a banking website:

Authentication: Users must log in with a valid username and password.
Authorization: Only users with the "Manager" role can view all accounts. Regular users can only see their own account.
5. Key Terms to Know:
@EnableWebSecurity: Activates Spring Security in your application.
WebSecurityConfigurerAdapter: A class where you define your security rules.
CSRF Protection: Prevents attackers from making unauthorized actions on behalf of a logged-in user.

------------------------------------------------------------------------------






