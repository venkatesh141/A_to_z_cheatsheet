Cn Spring boot notes part 2


Persistence Explained in Simple Terms
Persistence means storing data permanently so that it remains available even after the application or system stops running. In programming,
it ensures that data created or modified by an application is saved in a persistent storage medium like a database, file system, or disk.
-----------------------------------------------------------------
In Spring Boot, derived queries refer to methods in Spring Data JPA repositories that automatically generate SQL queries based on the method name. 
This feature is a part of the Spring Data JPA framework, which allows developers to write database query methods without explicitly writing SQL code.

Derived queries are named methods in repository interfaces that follow a specific naming convention. Spring Data JPA interprets these method names and generates the required query dynamically.

Key Features of Derived Queries:
Method Naming Convention: The method name defines the query operation (e.g., findBy, readBy, countBy, etc.) and the fields used in the query.
No Need for Manual SQL: You don't have to write the actual SQL or JPQL query; Spring automatically generates it based on the method name.
Easy to Use: It simplifies the process of writing basic CRUD and simple conditional queries.
-----------------------------------------------------------------
Spring Data JPA is a part of the Spring Data project that simplifies the implementation of JPA (Java Persistence API)-based repositories. 
It provides a consistent way to interact with databases and helps developers focus on business logic 
by eliminating much of the boilerplate code associated with data access layers.
--------------------------------------------------------------------------
	public interface ToDoRepository: This declares an interface named ToDoRepository. It's a way to define how your application will interact with the database to manage Todo objects.

extends CrudRepository<Todo, Long>: This means that ToDoRepository is using the CrudRepository interface provided by Spring Data.

Todo: This is the type of object the repository will manage. It's usually a class representing a table in your database.
Long: This is the type of the ID field in the Todo class (the primary key).
Purpose:
By extending CrudRepository, your ToDoRepository automatically gets basic methods like:

save(Todo entity): Save a Todo object to the database.
findById(Long id): Find a Todo by its ID.
findAll(): Get all Todo objects.
deleteById(Long id): Delete a Todo by its ID.
In simple terms:
This code is saying:
"I want to create a way to easily save, update, retrieve, and delete Todo items from the database,
 and I don't need to write the code for these operations manually because Spring will handle it for me."
-------------------------------------------------------------------------------------------------------------
1. What is JpaRepository?

    JpaRepository is an interface provided by Spring Data JPA that helps you interact with the database without writing SQL queries.
    It provides built-in methods like s

    ave(), findById(), findAll(), delete(), etc., to perform basic CRUD operations (Create, Read, Update, Delete).
    It works with JPA (Java Persistence API), which is a standard for managing database tables as Java objects (called entities).

When you extend JpaRepository, you automatically get all these database-related methods for free.
2. What does this line mean?

public interface ItemDetailsRepository extends JpaRepository<ItemDetails, Integer>

    ItemDetailsRepository: This is your custom repository interface.
    extends JpaRepository<ItemDetails, Integer>:
        ItemDetails: This is the entity class that represents a table in your database.
        Integer: This is the data type of the primary key in your ItemDetails table (e.g., ID column is of type Integer).

So, this repository interface is linked to your ItemDetails table, and it will let you perform all database operations on this table.
3. What is a derived query?

Derived queries are methods in Spring Data JPA where you don’t write SQL. Instead, you create a method name that follows certain rules, and Spring automatically generates the query for you.
Example:

List<ItemDetails> findByPriceGreaterThan(double price);

    Method Name: findByPriceGreaterThan
        findBy: Means you want to retrieve data.
        Price: Refers to the column name in your ItemDetails table.
        GreaterThan: Means you want to find rows where the price is greater than the provided value.

What does it do?

This method will:

    Find all rows in the ItemDetails table where the value of the price column is greater than the value you pass as a parameter.
    It will return a list of ItemDetails objects.
------------------------------------------------------------------------
Let me explain these three types of queries in a simple way:
1. Derived Query

    Derived queries are built automatically by Spring Data JPA based on the method name.
    You don’t need to write SQL or JPQL; just follow the naming conventions, and Spring will do the rest.
    Example:

    public interface UserRepository extends JpaRepository<User, Long> {
        List<User> findByFirstName(String firstName); // Automatically generates a query like: SELECT * FROM users WHERE first_name = ?
    }

    Key point: No custom query is needed, just method names like findBy, countBy, etc.

2. JPQL (Java Persistence Query Language)

    JPQL is object-oriented. Instead of working with database tables, you write queries using entity names and their fields.
    Example:

    @Query("SELECT u FROM User u WHERE u.firstName = :firstName")
    List<User> findUsersByFirstName(@Param("firstName") String firstName);

        Here, User is the entity class, and firstName is the field in the class.
        JPQL is database-independent, making it portable.

3. Native Query

    Native queries are raw SQL queries written exactly as the database understands them.
    These queries are specific to the database you are using.
    Example:

    @Query(value = "SELECT * FROM users WHERE first_name = :firstName", nativeQuery = true)
    List<User> findUsersByFirstNameNative(@Param("firstName") String firstName);

        You are directly working with table names (users) and column names (first_name).

Key Differences:
Type	What it uses	When to use
Derived Query	Method names	When queries are simple and follow common patterns.
JPQL	Entity and field names	When you want a query that is portable and uses object-oriented concepts.
Native Query	Raw SQL and table/columns	When you need complex queries or database-specific features not supported by JPQL.

Let me know if you'd like to see more examples!

---------------------------------------------------------------------------------



